####################
# In Ubuntu 22.04 (Jammy), using two templates (DOCKWATER & Athackst template from ros2.dockerfile.jinja)
####################

FROM ros:humble-ros-base-jammy

# Setup timezone 
ENV TZ=Etc/UTC
RUN echo $TZ > /etc/timezone && \
  ln -fs /usr/share/zoneinfo/$TZ /etc/localtime
  
# Tools necessary and useful during development
ENV DEBIAN_FRONTEND=noninteractive
RUN apt update && apt install --no-install-recommends -y \
        bash-completion \
        build-essential \
        atop \
	ca-certificates \
        cmake \
        cppcheck \
	curl \
        expect \
        gdb \
        git \
	#gnupg2 (poss unneeded bc in humble-ros-core-jammy) 
        gnutls-bin \
	iputils-ping \
        libbluetooth-dev \
        libccd-dev \
        libcwiid-dev \
	libeigen3-dev \
        libfcl-dev \
        libgflags-dev \
        libgles2-mesa-dev \
        libgoogle-glog-dev \
        libspnav-dev \
        libusb-dev \
	lsb-release \
	net-tools \
	pkg-config \
        protobuf-compiler \
        python3-argcomplete \
        python3-sklearn \
        python3-matplotlib \
        python3-dbg \
        python3-empy \
        #python3-numpy (poss unneeded bc in python3)
        python3-setuptools \
        python3-scipy \
        python3-pip \
        python3-venv \
        #python3-rclpy (unable to locate)
	ruby \
        ros-dev-tools \
        rsync \
        software-properties-common \
	sudo \
        vim \
	wget \
	xvfb \
 && apt clean -qq

####################
# Setup locale
####################
RUN sudo apt update && sudo apt install locales \
  && sudo locale-gen en_US en_US.UTF-8 \
  && sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

ENV ROSDIST=humble
ARG GZDIST=garden
ENV GZ_VERSION garden
ENV AMENT_PREFIX_PATH=/opt/ros/humble
ENV COLCON_PREFIX_PATH=/opt/ros/humble
ENV LD_LIBRARY_PATH=/opt/ros/humble/lib
ENV PATH=/opt/ros/humble/bin:$PATH
ENV PYTHONPATH=/opt/ros/humble/lib/python3.10/site-packages
ENV ROS_PYTHON_VERSION=3
ENV ROS_VERSION=2
ENV DEBIAN_FRONTEND=

# Set up repo to install Ignition
RUN /bin/sh -c 'wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg' \
  && /bin/sh -c 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null'
  
# Install Gazebo and ROS2 Desktop
RUN apt update && apt install -y --no-install-recommends \
     gz-${GZDIST} \
     ros-${ROSDIST}-desktop \
  && rm -rf /var/lib/apt/lists/* \
  && apt clean -qq

# Install some 'standard' ROS packages and utilities.
RUN apt update && apt install -y --no-install-recommends \
     python3-colcon-common-extensions \
     python3-vcstool \
     python3-sdformat13 \
     ros-${ROSDIST}-actuator-msgs \
     ros-${ROSDIST}-ament-cmake-pycodestyle \
     ros-${ROSDIST}-image-transport \
     ros-${ROSDIST}-image-transport-plugins \
     ros-${ROSDIST}-joy-teleop \
     ros-${ROSDIST}-joy-linux \
     ros-${ROSDIST}-mavros-msgs \
     ros-${ROSDIST}-radar-msgs \
     ros-${ROSDIST}-ros-gzgarden \
     ros-${ROSDIST}-rqt-graph \
     ros-${ROSDIST}-rqt-image-view \
     ros-${ROSDIST}-rqt-plot \
     ros-${ROSDIST}-rqt-topic \
     ros-${ROSDIST}-rviz2 \
     ros-${ROSDIST}-xacro \
     ros-${ROSDIST}-navigation2 \ 
     ros-${ROSDIST}-nav2-bringup \ 
  && sudo rm -rf /var/lib/apt/lists/* \
  && sudo apt clean -qq    

####################
# Jon Mazurkiewicz Code -- done by Rebekah M.
####################

RUN pip install -U \
transforms3d 

#RUN /bin/bash -c ". /opt/ros/${ROSDIST}/setup.bash"
#RUN /bin/bash -c 'echo ". /opt/ros/${ROSDIST}/setup.bash" >> ~/.bashrc' 

ENV ROS_2_WS /opt/ros2_ws  
#define working directory, which also creates it, using variable $ROS_2_WS defined above
WORKDIR $ROS_2_WS      

### following the "create a workspace flow" mixed with "new package flow" from Tyler's ROS2 cheat sheet     
#RUN source /opt/ros/foxy/setup.bash ##this was erroring on docker build
RUN ["/bin/bash", "-c", "source /opt/ros/${ROSDIST}/setup.bash &&  echo ${AMENT_PREFIX_PATH}"]
WORKDIR $ROS_2_WS/src
RUN ros2 pkg create --build-type ament_python  colorMapping  --dependencies rclpy
#RUN ros2 pkg create --build-type ament_python  AHC  --dependencies rclpy

#make dir for clone(doesn't go straight into src/AHC)>copy code(rsync)>delete temp 
WORKDIR $ROS_2_WS/src/temp
RUN git clone https://github.com/jonmaz4410/colorMapping.git .
# RUN git clone https://github.com/hazelrah2/AHC.git .
WORKDIR $ROS_2_WS/src
RUN rsync -av -I temp/ colorMapping/
#RUN rsync -av -I temp/ AHC/
RUN rm -rf temp

WORKDIR $ROS_2_WS
#resolve dependencies 
RUN rosdep update
RUN rosdep install -i --from-path src --rosdistro humble -y -r
#build workspace
RUN colcon build --symlink-install
##this was the way for athackst to build, but idk what most of this does and mine seems to work. 
# RUN colcon \
#     build \
#     --cmake-args \
#       -DSECURITY=ON --no-warn-unused-cli \
#     --symlink-install
##source new workspace
# RUN ["/bin/bash", "-c", "source /opt/ros/${ROS_DISTRO}/setup.bash"]
RUN ["/bin/bash", "-c", "source install/setup.bash"]

### include a bagfile so we can test AHC works
#RUN mkdir -p $ROS_2_WS/bagfiles
#copy from . on local machine to docker location
# COPY two_hand_wave.bag  $ROS_2_WS/bagfiles
#WORKDIR $ROS_2_WS/src
# RUN echo "in each window, do $ source /opt/ros2_ws/install/setup.bash" >> readme.txt
RUN curl -o README.txt -L https://raw.githubusercontent.com/hazelrah2/2023interns/main/readme_docker_AHC.txt
